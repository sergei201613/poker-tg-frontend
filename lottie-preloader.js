// Generated by deepseek.

class LottiePreloader {
    constructor() {
        this.animationCache = new Map();
    }

    // Preload an animation (optional - can use load() directly)
    async preloadAnimation(url) {
        if (this.animationCache.has(url)) {
            return this.animationCache.get(url);
        }

        try {
            const response = await fetch(url);
            const animationData = await response.json();
            this.animationCache.set(url, animationData);
            return animationData;
        } catch (error) {
            console.error('Failed to preload animation:', error);
            throw error;
        }
    }

    // Main load method - works whether preloaded or not
    async load(options) {
        const { path, ...restOptions } = options;

        // Check if already preloaded
        if (this.animationCache.has(path)) {
            const animationData = this.animationCache.get(path);
            return this.createAnimation(restOptions, animationData);
        }

        // Not preloaded, load it now
        try {
            alert("load 3, fetching: " + path)
            const response = await fetch(path);
            alert("load 4, fetched")
            const animationData = await response.json();
            alert("load 4, json stuff done")
            this.animationCache.set(path, animationData);
            return this.createAnimation(restOptions, animationData);
        } catch (error) {
            console.error('Failed to load animation:', error);
            throw error;
        }
    }

    // Helper method to create animation instance
    createAnimation(options, animationData) {
        return lottie.loadAnimation({
            ...options,
            animationData: animationData,
            autoplay: false
        });
    }

    // Check if animation is already cached
    isCached(url) {
        return this.animationCache.has(url);
    }

    // Clear cache (optional)
    clearCache() {
        this.animationCache.clear();
    }
}
